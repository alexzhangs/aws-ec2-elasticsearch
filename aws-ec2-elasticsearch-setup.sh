#!/bin/bash -e

[[ $DEBUG -gt 0 ]] && set -x || set +x

BASE_DIR="$(cd "$(dirname "$0")"; pwd)"
PROGNAME=${0##*/}

usage () {
    printf "$PROGNAME\n"
    printf "\t[-n CLUSTER_NAME]\n"
    printf "\t[-p PLUGIN_NAME] ...\n"
    printf "\t[-c CLUSTER_SETTING] ...\n"
    printf "\t[-h]\n\n"

    printf "OPTIONS\n"
    printf "\t[-n CLUSTER_NAME]\n\n"
    printf "\tCluster name. Default is 'esonaws'.\n\n"

    printf "\t[-p PLUGIN_NAME] ...\n\n"
    printf "\tInstall specified plugin.\n"
    printf "\tMulti -p is allowed.\n\n"

    printf "\t[-c CLUSTER_SETTING] ...\n\n"
    printf "\tCLUSTER_SETTING format: key=value\n"
    printf "\tMulti -c is allowed.\n\n"

    printf "\t[-h]\n\n"
    printf "\tThis help.\n\n"
    exit 255
}

plugin_is_exist () {
    local name=${1:?}
}

install_plugin () {
    local name=${1:?}

    if plugin_is_exist "$name"; then
        echo "plugin $name already installed"
    else
        /usr/share/elasticsearch/bin/plugin install -b "$name"
    fi
}

get_ec2_private_ip () {
    curl http://169.254.169.254/latest/meta-data/local-ipv4
}

get_ec2_public_ip () {
    curl http://169.254.169.254/latest/meta-data/public-ipv4
}

get_total_memory_size () {
    cat /proc/meminfo | \
        grep MemTotal | \
        awk '{ print $2 }' # In KB
}

calc_es_heap_size () {
    local mem=$(get_total_memory_size)
    echo $((mem / 1024 / 2))m # In MB
}


plugins=()
es_settings=()
cluster_settings=()
while getopts n:p:c:h opt; do
    case $opt in
        n)
            cluster_name=$OPTARG
            ;;
        p)
            plugins[${#plugins[@]}]=$OPTARG
            ;;
        c)
            cluster_settings[${#cluster_settings[@]}]=$OPTARG
            ;;
        h|*)
            usage
            ;;
    esac
done

if [[ -z $cluster_name ]]; then
    cluster_name='esonaws'
fi

# plugins

for p in "${plugins[@]}"; do
    install_plugin "$p"
done

# elasticsearch settings

content="ES_HEAP_SIZE=$(calc_es_heap_size)"
regex='^#ES_HEAP_SIZE='
mark_begin="# BEGIN: Generated by $PROGNAME for ES_HEAP_SIZE"
mark_end="# -END-: Generated by $PROGNAME for ES_HEAP_SIZE"
sh "$BASE_DIR/inject-to-file.sh" \
    -c "$content" \
    -f /etc/sysconfig/elasticsearch \
    -p after \
    -a "$regex" \
    -m "$mark_begin" \
    -n "$mark_end" \
    -x "$mark_begin" \
    -y "$mark_end"

content='MAX_LOCKED_MEMORY=unlimited'
regex='^#MAX_LOCKED_MEMORY='
mark_begin="# BEGIN: Generated by $PROGNAME for MAX_LOCKED_MEMORY"
mark_end="# -END-: Generated by $PROGNAME for MAX_LOCKED_MEMORY"
sh "$BASE_DIR/inject-to-file.sh" \
    -c "$content" \
    -f /etc/sysconfig/elasticsearch \
    -p after \
    -a "$regex" \
    -m "$mark_begin" \
    -n "$mark_end" \
    -x "$mark_begin" \
    -y "$mark_end"

# cluster basic settings

private_ip=$(get_ec2_private_ip)
content="
cluster.name: \"$cluster_name\"
discovery.zen.ping.unicast.hosts: [\"${private_ip:?}\"]
network.host: [\"${private_ip:?}\"]
"
mark_begin="# BEGIN: Generated by $PROGNAME for basic cluster settings"
mark_end="# -END-: Generated by $PROGNAME for basic cluster settings"
sh "$BASE_DIR/inject-to-file.sh" \
    -c "$content" \
    -f /etc/elasticsearch/elasticsearch.yml \
    -p end \
    -m "$mark_begin" \
    -n "$mark_end" \
    -x "$mark_begin" \
    -y "$mark_end"

# cluster parameterize settings

for kv in "${cluster_settings[@]}"; do
    key="$(echo "$kv" | cut -d= -f1)"
    content="$(echo "$kv" | sed 's/=/:/')"
    mark_begin="# BEGIN: Generated by $PROGNAME for $key"
    mark_end="# -END-: Generated by $PROGNAME for $key"
    sh "$BASE_DIR/inject-to-file.sh" \
       -c "$content" \
       -f /etc/elasticsearch/elasticsearch.yml \
       -p end \
       -m "$mark_begin" \
       -n "$mark_end" \
       -x "$mark_begin" \
       -y "$mark_end"
done

service elasticsearch start
chkconfig --add elasticsearch

#sleep 10
#curl ${private_ip:?}:9200/_cluster/health?pretty

exit
